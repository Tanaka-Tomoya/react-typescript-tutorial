{"ast":null,"code":"import { withRouter } from 'react-router';\nimport { parse } from 'query-string';\nimport { characterData } from '../../characterData';\nimport './index.css';\n\nvar Characters = function Characters(_ref) {\n  var history = _ref.history,\n      location = _ref.location,\n      match = _ref.match;\n  var codes = Object.keys(characterData);\n  var targetCode = match.params.code;\n  var isLoading = parse(location.search).loading === 'true';\n  console.log(location.search);\n  return codes.includes(targetCode);\n};\n\nexport default withRouter(Characters);","map":{"version":3,"sources":["/Users/tomoyatanaka/projects/react-typescript-tutorial/09-routing/src/components/Characters/index.tsx"],"names":["withRouter","parse","characterData","Characters","history","location","match","codes","Object","keys","targetCode","params","code","isLoading","search","loading","console","log","includes"],"mappings":"AACA,SAA8BA,UAA9B,QAAgD,cAAhD;AAEA,SAASC,KAAT,QAAsB,cAAtB;AAIA,SAASC,aAAT,QAA8B,qBAA9B;AAIA,OAAO,aAAP;;AAIA,IAAMC,UAA+B,GAAG,SAAlCA,UAAkC,OAAgC;AAAA,MAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,MAArBC,QAAqB,QAArBA,QAAqB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AACtE,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYP,aAAZ,CAAd;AACA,MAAMQ,UAAU,GAAGJ,KAAK,CAACK,MAAN,CAAaC,IAAhC;AACA,MAAMC,SAAS,GAAGZ,KAAK,CAACI,QAAQ,CAACS,MAAV,CAAL,CAAuBC,OAAvB,KAAmC,MAArD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAQ,CAACS,MAArB;AAEA,SAAOP,KAAK,CAACW,QAAN,CAAeR,UAAf,CAAP;AACD,CAPD;;AASA,eAAeV,UAAU,CAACG,UAAD,CAAzB","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Redirect } from 'react-router-dom';\nimport { parse } from 'query-string';\nimport Helmet from 'react-helmet';\nimport { Button, Divider, Icon } from 'semantic-ui-react';\n\nimport { characterData } from '../../characterData';\nimport Spinner from '../common/Spinner';\nimport CharacterList from './CharacterList';\n\nimport './index.css';\n\ntype CharactersProps = {} & RouteComponentProps<{code: string}>;\n\nconst Characters: FC<CharactersProps> = ({history, location, match}) => {\n  const codes = Object.keys(characterData);\n  const targetCode = match.params.code;\n  const isLoading = parse(location.search).loading === 'true'\n  console.log(location.search)\n\n  return codes.includes(targetCode)\n}\n\nexport default withRouter(Characters)"]},"metadata":{},"sourceType":"module"}